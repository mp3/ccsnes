name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
        - build: linux
          os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          extension: ""
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
          extension: ""
        - build: windows
          os: windows-latest
          target: x86_64-pc-windows-msvc
          extension: ".exe"
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Package
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../ccsnes-${{ matrix.target }}.tar.gz ccsnes${{ matrix.extension }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./ccsnes-${{ matrix.target }}.tar.gz
        asset_name: ccsnes-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip

  build-wasm:
    name: Build WebAssembly
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WASM
      run: wasm-pack build --target web
    
    - name: Package WASM
      run: |
        cd pkg
        tar czf ../ccsnes-wasm.tar.gz *
    
    - name: Upload WASM Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./ccsnes-wasm.tar.gz
        asset_name: ccsnes-wasm.tar.gz
        asset_content_type: application/gzip